using System;
using System.Data;

// Clase Node: Representa un término del polinomio.
class Node
{
    public double Coeficiente { get; set; } // Coeficiente del término (por ejemplo, 3 en 3x^2).
    public int Exponente { get; set; }      // Exponente del término (por ejemplo, 2 en 3x^2).
    public Node Next { get; set; }          // Referencia al siguiente término en la lista enlazada.

    // Constructor de Node: Inicializa un término con un coeficiente y exponente.
    public Node(double coeficiente, int exponente)
    {
        Coeficiente = coeficiente; // Asigna el coeficiente proporcionado.
        Exponente = exponente;     // Asigna el exponente proporcionado.
        Next = null;               // Inicialmente, no hay siguiente término, por lo que Next es null.
    }
}

// Clase Polinomio: Representa un polinomio como una lista enlazada de términos.
class Polinomio
{
    private Node head; // Puntero al primer término del polinomio (cabeza de la lista enlazada).

    // Constructor de Polinomio: Inicializa un polinomio vacío.
    public Polinomio()
    {
        head = null;
    }

    // Método AgregarTermino: Agrega un nuevo término al polinomio.
    public void AgregarTermino(double coeficiente, int exponente)
    {
        Node nuevoNodo = new Node(coeficiente, exponente); // Crea un nuevo nodo con el término proporcionado.

        // Si la lista está vacía (head es null), el nuevo nodo se convierte en la cabeza.
        if (head == null)
        {
            head = nuevoNodo;
        }
        else
        {
            // Si la lista no está vacía, recorre hasta el último nodo y agrega el nuevo término al final.
            Node temp = head;
            while (temp.Next != null)
            {
                temp = temp.Next;
            }
            temp.Next = nuevoNodo; // Conecta el último nodo al nuevo nodo.
        }
    }

    // Método Evaluar: Calcula el valor del polinomio para un valor específico de x.
    public double Evaluar(double x)
    {
        double resultado = 0; // Inicializa el resultado en 0.
        Node temp = head;     // Comienza desde el primer término.

        // Recorre todos los términos del polinomio.
        while (temp != null)
        {
            // Suma el valor del término actual al resultado.
            // El valor de un término es coeficiente * x^exponente.
            resultado += temp.Coeficiente * Math.Pow(x, temp.Exponente);
            temp = temp.Next; // Avanza al siguiente término.
        }
        return resultado; // Retorna el valor calculado del polinomio.
    }

    // Método Derivar: Calcula la derivada del polinomio.
    public Polinomio Derivar()
    {
        Polinomio derivada = new Polinomio(); // Crea un nuevo polinomio para almacenar la derivada.
        Node temp = head; // Comienza desde el primer término.

        // Recorre todos los términos del polinomio.
        while (temp != null)
        {
            // Si el exponente no es cero, deriva el término.
            // La derivada de a*x^n es (a*n)*x^(n-1).
            if (temp.Exponente != 0)
            {
                derivada.AgregarTermino(temp.Coeficiente * temp.Exponente, temp.Exponente - 1);
            }
            temp = temp.Next; // Avanza al siguiente término.
        }
        return derivada; // Retorna el polinomio derivado.
    }

    // Método Imprimir: Muestra el polinomio en formato legible.
    public void Imprimir()
    {
        Node temp = head; // Comienza desde el primer término.
        while (temp != null)
        {
            // Imprime el término actual en formato "ax^n".
            Console.Write($"{temp.Coeficiente}x^{temp.Exponente}");
            if (temp.Next != null)
            {
                Console.Write(" + "); // Agrega un "+" si hay más términos.
            }
            temp = temp.Next; // Avanza al siguiente término.
        }
        Console.WriteLine(); // Salto de línea al final para mejor formato.
    }
}

// Clase Program: Contiene el punto de entrada del programa (Main).
class Program
{
    static void Main(string[] args)
    {
        bool salir = false; // Variable para controlar si el usuario desea salir.
        Polinomio polinomio = null; // Variable para almacenar el polinomio ingresado por el usuario.

        // Ciclo principal del programa: se ejecuta hasta que el usuario elija salir.
        while (!salir)
        {
            Console.Clear();
            // Menú de opciones para el usuario.
            Console.WriteLine("\n--- Menú ---");
            Console.WriteLine("1. Ingresar un nuevo polinomio");
            Console.WriteLine("2. Evaluar el polinomio actual");
            Console.WriteLine("3. Calcular la derivada del polinomio actual");
            Console.WriteLine("4. Salir");
            Console.Write("Seleccione una opción: ");
            string opcion = Console.ReadLine(); // Lee la opción seleccionada por el usuario.

            switch (opcion)
            {
                case "1": // Opción 1: Ingresar un nuevo polinomio.
                    polinomio = new Polinomio(); // Crea un nuevo polinomio vacío.
                    Console.WriteLine("\nIngrese los términos del polinomio (coeficiente exponente). Escriba '0 0' para terminar:");
                    while (true)
                    {
                        // Lee la entrada del usuario y la divide en coeficiente y exponente.
                        string[] entrada = Console.ReadLine().Split();
                        double coeficiente = double.Parse(entrada[0]);
                        int exponente = int.Parse(entrada[1]);

                        // Si el usuario ingresa '0 0', termina la entrada de términos.
                        if (coeficiente == 0 && exponente == 0)
                        {
                            break;
                        }

                        // Agrega el término al polinomio.
                        polinomio.AgregarTermino(coeficiente, exponente);
                    }
                    Console.WriteLine("\nPolinomio ingresado:");
                    polinomio.Imprimir(); // Imprime el polinomio ingresado.
                    Console.WriteLine("Precione una tecla para continuar...");
                    Console.ReadKey();
                    break;

                case "2": // Opción 2: Evaluar el polinomio actual.
                    if (polinomio == null)
                    {
                        Console.WriteLine("\nPrimero ingrese un polinomio.");
                        break;
                    }
                    Console.Write("\nIngrese el valor de x para evaluar el polinomio: ");
                    double x = double.Parse(Console.ReadLine()); // Lee el valor de x.
                    double resultado = polinomio.Evaluar(x); // Evalúa el polinomio.
                    Console.WriteLine("\nPolinomio ingresado:");
                    polinomio.Imprimir();
                    Console.WriteLine($"\nEl resultado de evaluar el polinomio en x = {x} es: {resultado}");
                    Console.WriteLine("Precione una tecla para continuar...");
                    Console.ReadKey();
                    break;

                case "3": // Opción 3: Calcular la derivada del polinomio actual.
                    if (polinomio == null)
                    {
                        Console.WriteLine("\nPrimero ingrese un polinomio.");
                        break;
                    }
                    Console.WriteLine("\nPolinomio ingresado:");
                    polinomio.Imprimir();
                    Polinomio derivada = polinomio.Derivar(); // Calcula la derivada.
                    Console.WriteLine("\nLa derivada del polinomio es:");
                    derivada.Imprimir(); // Imprime la derivada.
                    Console.WriteLine("Precione una tecla para continuar...");
                    Console.ReadKey();
                    break;

                case "4": // Opción 4: Salir del programa.
                    salir = true; // Establece la variable salir en true para terminar el ciclo.
                    Console.WriteLine("\n¡Gracias por usar el programa! ¡Hasta luego!");
                    break;

                default: // Opción no válida.
                    Console.WriteLine("\nOpción no válida. Intente de nuevo.");
                    break;
            }
        }
    }
}
